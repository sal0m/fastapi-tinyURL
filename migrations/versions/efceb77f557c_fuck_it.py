"""fuck it

Revision ID: efceb77f557c
Revises: 282a05c37f44
Create Date: 2025-03-23 14:27:50.482899

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'efceb77f557c'
down_revision: Union[str, None] = '282a05c37f44'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Удаляем таблицу stats (без CASCADE)
    op.drop_table('stats')

    # Удаляем таблицу url (без CASCADE)
    op.drop_table('url')

    # Изменяем столбец registered_at в таблице user
    op.alter_column('user', 'registered_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)

    # Удаляем уникальное ограничение на email
    op.drop_constraint('uq_user_email', 'user', type_='unique')

    # Создаем новый индекс на email
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Удаляем индекс на email
    op.drop_index(op.f('ix_user_email'), table_name='user')

    # Восстанавливаем уникальное ограничение на email
    op.create_unique_constraint('uq_user_email', 'user', ['email'])

    # Возвращаем столбец registered_at в исходное состояние
    op.alter_column('user', 'registered_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)

    # Восстанавливаем таблицу url
    op.create_table('url',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('original_url', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('short_code', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column('custom_alias', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('user_email', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['user_email'], ['user.email'], name='fk_url_user_email'),
        sa.PrimaryKeyConstraint('id', name='url_pkey'),
        sa.UniqueConstraint('custom_alias', name='url_custom_alias_key'),
        sa.UniqueConstraint('short_code', name='url_short_code_key')
    )

    # Восстанавливаем таблицу stats
    op.create_table('stats',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('url_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('visit_count', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('last_visited_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['url_id'], ['url.id'], name='stats_url_id_fkey'),
        sa.PrimaryKeyConstraint('id', name='stats_pkey')
    )

    # Восстанавливаем индексы
    op.create_index('ix_url_id', 'url', ['id'], unique=False)
    op.create_index('ix_stats_id', 'stats', ['id'], unique=False)
    # ### end Alembic commands ###
